/**
@page databaseproto The Database/Backend Protocol

OpenTodoList uses an internal database to maintain the various objects required throughout the
lifetime of the application. Even though in theory the application could live without any backend,
the main purpose (and most interesting thing) is the usage of various backends to store
todo lists. In the following, a brief overview on the database and the communication protocol
between the application and the various backends is given.

@section databaseproto_objectstorage Object Storage

The OpenTodoList database is used to store various objects (like accounts, todo lists, todos
and tasks). Storing will include two types of attributes:

@subsection databaseproto_objectstorage_objectproperties Object Properties

The properties of the objects are stored "as-is" from the object instance given at runtime. In
other words, the objects are persisted into the database.

@subsection databaseproto_objectstorage_syncproperties Sync Properties

Apart from the objects' actual properties, also a set of additional attributes are maintained
inside the database, which are used for the synchronization protocol between the application
and the various backends. In particular, these are:

- The @b dirty flag is used to indicate that the object has been modified in the frontend. It is
  an integer value which is increased by one for each modification done to the object. A value of
  0 (or false) means "no modification", whereas any value greater than zero means that
  there are modifictions pending.
- The @b disposed flag is used to indicate that the object has been deleted from the frontend. It is
  a single boolean flag.

@section databaseproto_sync The Sync Protocol between Database and Backends

In the following the "sync" protocol between the database and the backends is described, which
builds on the above described sync properties. Basically, the following basic primitives are
implemented in the application:

@subsection databaseproto_sync_insert Insertion Objects

To create new objects in the database, a backend has to use of of
OpenTodoList::IDatabase::createAccount(), OpenTodoList::IDatabase::createTodoList(),
OpenTodoList::IDatabase::createTodo() or OpenTodoList::IDatabase::createTask().
These methods will create a new, empty object which can be filled out by the backend and
then be put into the database using one of OpenTodoList::IDatabase::insertAccount(),
OpenTodoList::IDatabase::insertTodoList(), OpenTodoList::IDatabase::insertTodo() and
OpenTodoList::IDatabase::insertTask(). After that, the returned object shall be
destroyed. The procedure is outlined for a todo in the chart below.

@msc
IDatabase,IBackend;
IDatabase<=IBackend [label="createTodo()"];
IDatabase>>IBackend [label="return new Todo()"];
IBackend=>IBackend [label="fill todo"];
IDatabase<=IBackend [label="insertTodo(todo)"];
IDatabase>>IBackend;
IBackend=>IBackend [label="delete todo"];
@endmsc

@note Upon calling the various insert methods, if an object with the same UUID as the new
      one is already present in the database, then the existing object will be updated instead. In
      this case, both the @b dirty as well as the @b disposed flags are reset.

@subsection databaseproto_sync_update Updating Objects

To update an existing object, a backend can use one of the methods
OpenTodoList::IDatabase::getAccount(), OpenTodoList::IDatabase::getTodoList(),
OpenTodoList::IDatabase::getTodo() and OpenTodoList::IDatabase::getTask(). The backend then can
modify the various properties of the object and use one of
OpenTodoList::IDatabase::insertAccount(), OpenTodoList::IDatabase::insertTodoList(),
OpenTodoList::IDatabase::insertTodo() and OpenTodoList::IDatabase::insertTask() to
update the object in the database. After the transaction, the object shall be destroyed.

The procedure is shown for the case of todos in below message sequence chart.

@msc
IDatabase,IBackend;
IDatabase<=IBackend [label="getTodo()"];
IDatabase>>IBackend [label="return todo"];
IBackend=>IBackend [label="update todo"];
IDatabase<=IBackend [label="insertTodo(todo)"];
IDatabase>>IBackend;
IBackend=>IBackend [label="delete todo"];
@endmsc

@note Using the various insert methods will override any changes in the database as well as
      resetting the @b dirty and @b disposed fields.

@subsection databaseproto_sync_modify Modifying Objects

Whenever from the UI part of the application an object in the database is modified, the
@b dirty flag is increased by one. Backends shall use this for writing back information to their
backing service.

@note For "container objects" (such as todo lists which contain todos), modifying the container
      itself only will cause the dirty flag to be set on the container, not the contained objects.

To query all modified objects, the methods OpenTodoList::IDatabase::getModifiedAccounts(),
OpenTodoList::IDatabase::getModifiedTodoLists(), OpenTodoList::IDatabase::getModifiedTodos()
and OpenTodoList::IDatabase::getModifiedTasks() are available. They return either all modified
objects of a kind or - on request - up to a maximum value specified in the call. For each of the
returned objects, the backend shall first save the current version of the object, and then call
one of the methods and OpenTodoList::IDatabase::onAccountSaved(),
and OpenTodoList::IDatabase::onTodoListSaved(), and OpenTodoList::IDatabase::onTodoSaved() or
and OpenTodoList::IDatabase::onTaskSaved() with the given task to indicate to the database which
version now is "current" in the backend. This will furthermore decrease the @b dirty
flag by its value contained in the object queries just before the saving. This also means that
after this proceduce, an object might still be marked as modified (if there was an update to the
object between querying the objects in the backend and emitting the notification towards
the database. The procedure is shown on an example for a todo in the following message sequence
chart:

@msc
IDatabase,IBackend;
IDatabase<=IBackend [label="getModifiedTodos()"];
IDatabase>>IBackend [label="return todos"];
IBackend box IBackend [label="for each todo in todos"];
IBackend=>IBackend [label="save todo"];
IDatabase<=IBackend [label="onTodoSaved(todo)"];
IDatabase=>IDatabase [label="decrease dirty by value of todo.dirty when it was created"];
IDatabase>>IBackend;
IBackend=>IBackend [label="delete todo"];
@endmsc


@subsection databaseproto_sync_deleting Deleting Objects

Whenever an object is deleted in the UI part of the application, it is retained in the database,
but its @b disposed flag is set to true to indicate this.

@note For "container objects", deleting the container only causes the flag to be set for the
      container, not for the contained objects.

The backend can use one of the methods OpenTodoList::IDatabase::getDeletedAccounts(),
OpenTodoList::IDatabase::getDeletedTodoLists(), OpenTodoList::IDatabase::getDeletedTodos() and
OpenTodoList::IDatabase::getDeletedTasks() to get objects marked for deletion per type. The backend
then shall first delete the appropriate object in its backing service, before calling
one of OpenTodoList::IDatabase::deleteAccount(), OpenTodoList::IDatabase::deleteTodoList(),
OpenTodoList::IDatabase::deleteTodo() or OpenTodoList::IDatabase::deleteTask().

@note It is not necessary to delete objects recursively. If, e.g. a todo list shall be deleted,
      it is sufficient to pass it to OpenTodoList::IDatabase::deleteTodoList(). This will also
      remove any todos and tasks from the database. On the other side, if e.g. a todo list is marked
      as deleted, only this list will have the flag - contained objects are not explicitly marked
      deleted. Hence, deletion in the backing service shall be implemented recursively.

The whole procedure is shown in the following message sequence chart for the case of todos.

@msc
IDatabase,IBackend;
IDatabase<=IBackend [label="getDeletedTodos()"];
IDatabase>>IBackend [label="return todos"];
IBackend box IBackend [label="for each todo in todos"];
IBackend=>IBackend [label="delete todo in backing service"];
IDatabase<=IBackend [label="deleteTodo(todo)"];
IDatabase>>IBackend;
IBackend=>IBackend [label="delete todo"];
@endmsc

*/
