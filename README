OpenTodoList - Todo Management Application


ABOUT

    OpenTodoList is an application to manage todos within lists. It
    is build on top of Qt5 which means it is available on a variety of
    different operating systems. Furthermore, the used plugin system allows
    to easily integrate different sources where todos can be stored.

    
BUILDING

    In order to build OpenTodoList, you will need:
    - Qt5 (tested with Qt 5.4)
    - An appropriate C++ compiler (has to be C++11 capable)
    
    Assuming you have downloaded a copy of OpenTodoList to
    /home/myself/opentodolist, do the following to build the application:
    
        cd /home/myself
        mkdir opentodolist-build
        cd opentodolist-build
        qmake ../opentodolist
        make

    During the build process, a sub-directory "bin" within opentodolist-build
    will be created. Execute the contained executable to start OpenTodoList.


BACKENDS

    OpenTodoList uses a plugin system to allow using different "backends" to
    store data. This is the list of existing plugins:
    
    LocalXmlBackend
        Stores data in XML files on the local hard disk. Todo lists of this
        type can be used if no synchronization between several devices is
        wanted (or not allowed).


FRONTENDS

    OpenTodoList strictly partitions business logic and UI from each other.
    This allows (in theory) writing different UIs for different form factory
    (i.e. we could use another UI for touch devices compared to
    traditional desktop systems). Currently (due to the lack of resources)
    only one UI is supported, which is mainly tailored towards touch devices
    but should also work out well on a desktop system.


DEVELOPING OPENTODOLIST

    OpenTodoList is developed using Qt Creator and qmake. However, other IDEs (as
    long as they support qmake) should work as well.

    
PROVIDING INSTALLERS

    OpenTodoList comes with tools that allow to use the Qt Installer Framework (QtIFW)
    to provide both only as well as offline installers. In the following, the
    steps to create these installers are described per platform.

    LINUX

        1. Build OpenTodoList
        2. Install it using
             make install INSTALL_ROOT=$INSTALL_ROOT/OpenTodoList
           Note that $INSTALL_ROOT is an arbitrary location. You
           must install however into another subdirectory called
           OpenTodoList for the other scripts to work properly.
        3. Deploy Qt libraries:
            perl $OTLSOURCEDIR/bin/linux-deploy-qt.pl \
            --qt /path/to/qt --exe $INSTALL_ROOT/OpenTodoList/bin/OpenTodoList
        4. Create installers and online repository:
            perl $OTLSOURCEDIR/bin/mk-installer.pl \
                --installDir $INSTALL_ROOT \
                --targetDir /path/to/where/installers/shall/be/saved \
                --os linux --arch ARCH_OF_CREATED_BINARIES

    MAC OS

        1. Build OpenTodoList
	2. Run macdeployqt tool to copy Qt binaries into the app bundle:
           macdeployqt OpenTodoList.app qmldir=/path/to/opentodolist/OpenTodoList/qml
        3. Create installers and online repository:
		perl $OTLSOURCEDIR/bin/mk-installer.pl \
                --installDir /path/to/OpenTodoList.app \
                --targetDir /path/to/where/installers/shall/be/saved \
                --os maces --arch ARCH_OF_CREATED_BINARIES \
		--copy-qt-menu-nib --dmg

    WINDOWS

        1. Build OpenTodoList
        2. Copy the directories for distribution (bin, share) from the build
           directory into a directory C:\path\to\dist
           Note: You have to create a sub-directory OpenTodoList within
           this directory and put the copied directories there.
        3. Run windeployqt.exe on the OpenTodoList.exe
        4. "cd" into C:\path\to\dist
        4. Create installers and only repository:
             perl %OTLSOURCEDIR%\bin\mk-installer.pl \
             --installDir . \
             --targetDir C:\path\to\installersdir \
             --os windows --arch ARCH_OF_CREATED_BINARIES

